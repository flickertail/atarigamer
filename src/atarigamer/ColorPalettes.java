//
// Copyright (C) 2005 Aaron Bergstrom 
// 
//This library is free software; you can redistribute it and/or 
//modify it under the terms of the GNU Lesser General Public License 
//as published by the Free Software Foundation; either version 2.1 of 
//the License, or (at your option) any later version.

//This library is distributed in the hope that it will be useful, but 
//WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
//License for more details.

//You should have received a copy of the GNU Lesser General Public License 
//along with this library; if not, write to the Free Software Foundation, Inc., 
//59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// File: ColorPalettes.java
//
//
// Author:	Aaron Bergstrom
//

package atarigamer;

import javax.swing.*;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.*;

/**
 *
 * @author  Administrator
 */
public class ColorPalettes extends JComponent{
    
    /** Creates new form colorpalettes */
    public ColorPalettes(DevProject dp) {
        this.dp = dp;
        this.cp = this;
        setUp();
        addMouseListeners();
//        overRideClose();
//        this.jdp.add(this);
//        this.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents
    
    private void setUp(){
//        this.setFrameIcon(new ImageIcon(ASMEditor.class.getResource("color_fi.gif")));

        this.setPreferredSize(new Dimension(256, 128));//273 145
        this.setSize(256, 128);//273 144
//        this.setSize(300,400);
        
//        this.setResizable(false);
//        this.setIconifiable(true);
//        this.setClosable(true);
//        this.getContentPane().setLayout(new BorderLayout(1,1));

        hColorVector.add(new String("00"));

        biNTSC = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("ntsc.jpg"));
        biPAL = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("pal.jpg"));
        biSECAM = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("secam.jpg"));
        //biIconNTSC = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("ntscicon.jpg"));
        //biIconPAL = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("palicon.jpg"));
        //biIconSECAM = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("secamicon.jpg"));
        //scrollImage = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("colorscroll.jpg"));
        //press_up = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("pressed_up.jpg"));
        //press_dn = Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("pressed_dn.jpg"));
        
        defcur = Cursor.getDefaultCursor();
        dropper = Toolkit.getDefaultToolkit().createCustomCursor(Toolkit.getDefaultToolkit().createImage(ColorPalettes.class.getResource("eyedrop.gif")), new Point(17,17), "Dropper");
        bi = new BufferedImage(256, 128, BufferedImage.TYPE_INT_BGR);//274 145
        this.setDrawImage(0);
        this.setDrawImage(1);
        this.setDrawImage(2);
        
        dp.pTools.setCurrentColor(selectColorWithText((String)hColorVector.get(hColorVector.size()-1)));
    }
    
    protected void setDrawImage(int dChoice)
    {
        switch(dChoice){
            case 0:
                bi.getGraphics().drawImage(biNTSC,0,0,null);
                break;
            case 1:
                bi.getGraphics().drawImage(biPAL,0,0,null);
                break;
            case 2:
                bi.getGraphics().drawImage(biSECAM,0,0,null);
                break;
            default:
                bi.getGraphics().drawImage(biNTSC,0,0,null);
                break;
        }
        drawImage = (Image)bi;
    }
    
    protected String xDigit(int xValue){
        String retString = "" + xValue;
        switch(xValue){
            case 10:
                retString = "A";
                break;
            case 11:
                retString = "B";
                break;
            case 12:
                retString = "C";
                break;
            case 13:
                retString = "D";
                break;
            case 14:
                retString = "E";
                break;
            case 15:
                retString = "F";
                break;
            default:
                break;
        }
        return retString;
    }
    
    protected String yDigit(int yValue){
        int tVal = yValue;
        String retString = "" + tVal;
        switch(tVal){
            case 10:
                retString = "A";
                break;
            case 11:
                retString = "A";
                break;
            case 12:
                retString = "C";
                break;
            case 13:
                retString = "C";
                break;
            case 14:
                retString = "E";
                break;
            case 15:
                retString = "E";
                break;
            default:
                break;
        }
        return retString;
    }

    private boolean isColorDropper(MouseEvent e)
    {
        curLoc = e.getPoint();
        isDropper = false;
        
        //if (curLoc.x > xLoc.x && curLoc.x < xLoc.y){
        //    if (curLoc.y > yLoc.x && curLoc.y < yLoc.y){
        //        isDropper = true;
        //    }
        //}
        if(curLoc.x < 256 && curLoc.x > 0 && curLoc.y < 128 && curLoc.y > 0) isDropper = true;
        if(isDropper) cp.setCursor(dropper);
        else cp.setCursor(defcur);
        return isDropper;
    }
    
    private String[] getHexValues(Point aPoint)
    {
        String aString[] = {"0", "0"};
        double fx = aPoint.x;
        double fy = aPoint.y;
        System.out.println("FX: " + fx);
        System.out.println("FY: " + fy);
//        fx = fx-24.375;
//        fy = fy-12.625;
                    
        fx = fx/16;
        fy = fy/8;
                    
        aString[0] = xDigit((int)Math.floor(fx));
        aString[1] = yDigit((int)Math.floor(fy));
        return aString;
    }
    
    @SuppressWarnings("unchecked")
	private void getIconColor()//9999
    {
//        if (curLoc.x > xLoc.x && curLoc.x < xLoc.y){
//            if (curLoc.y > yLoc.x && curLoc.y < yLoc.y){
            	String textVal = (String)hColorVector.get(hColorVector.size()-1);
            	System.out.println("Current Color: " + textVal);
                dp.pTools.setCurrentColor(selectColorWithText(textVal));
//            }
//        }
    }
    
    private void setColorSelection(boolean isReplace)
    {
        int xWalk = 1;
        int yWalk = 1;
        Point offset = new Point(startPoint);
        
        if(startPoint.x > endPoint.x)
        {
            offset.x = endPoint.x;
            xWalk = -1;
        }
        if(startPoint.y > endPoint.y)
        {
            offset.y = endPoint.y;
            yWalk = -1;
        }
        int liw = startPoint.x - endPoint.x;
        liw = Math.abs(liw) + 1;
        
        int lih = startPoint.y - endPoint.y;
        lih = Math.abs(lih) + 1;
        
        BufferedImage lineImage = new BufferedImage(liw, lih, BufferedImage.TYPE_BYTE_GRAY);
        Graphics2D g2d = (Graphics2D)lineImage.getGraphics();
        g2d.setPaint(Color.BLACK);
        Rectangle lRect = new Rectangle(0, 0, liw, lih);
        g2d.fill(lRect);
        g2d.setPaint(Color.WHITE);
        
        Point plotStart = new Point(0, 0);
        Point plotEnd = new Point(liw-1, lih-1);
        
        if(xWalk == -1)
        {
            plotStart.x = liw-1;
            plotEnd.x = 0;
        }
        
        if(yWalk == -1)
        {
            plotStart.y = lih-1;
            plotEnd.y = 0;
        }
        
        Line2D.Float lLine = new Line2D.Float(plotStart, plotEnd);
        g2d.draw(lLine);
        
        extractColorPoints(plotStart, offset, plotEnd, lineImage, xWalk, yWalk, isReplace);
        
    }
    
    private void extractColorPoints(Point plotStart, Point offset, Point plotEnd, BufferedImage lineImage, int xWalk, int yWalk, boolean isReplace)
    {
        Vector tcVector = new Vector();
        boolean isRunning = true;
        while(isRunning)
        {
            Color cColor = new Color(lineImage.getRGB(plotStart.x, plotStart.y));
            if(cColor.equals(Color.WHITE))
            {
                Point tPoint = new Point(plotStart);
                tPoint.x = tPoint.x + offset.x;
                tPoint.y = tPoint.y + offset.y;
                tcVector.add(tPoint);
                if(plotStart.x != plotEnd.x) plotStart.x = plotStart.x + xWalk;
                else {
                    if(plotStart.x == plotEnd.x && plotStart.y == plotEnd.y) isRunning = false; 
                    plotStart.y = plotStart.y + yWalk;
                }
            }else{
                plotStart.y = plotStart.y + yWalk;
            }
            
            if(plotStart.x == plotEnd.x)
            {
                if(plotStart.y == plotEnd.y) isRunning = false;
            }
        }
        
        addToColorVector(tcVector, isReplace);
    }
    
    private void addToColorVector(Vector tcVector, boolean isReplace)
    {
        Vector newCVector = new Vector();
        Vector newPVector = new Vector();
        int tcSize = tcVector.size();
                        
        BufferedImage bi = new BufferedImage(256, 128, BufferedImage.TYPE_INT_BGR);
        bi.getGraphics().drawImage(drawImage,0,0,null);
        
        Point vPoint = (Point)tcVector.get(0);
        String vHex[] = getHexValues(vPoint);
        newPVector.add(new String(""+vHex[0]+vHex[1]));
        
        Color oldColor = new Color(bi.getRGB(vPoint.x, vPoint.y));
        newCVector.add(oldColor);
        
        for(int i=1; i< tcSize; i++)
        {
            Point tPoint = (Point)tcVector.get(i);
            Color tColor = new Color(bi.getRGB(tPoint.x, tPoint.y));
            if(!tColor.equals(oldColor))
            {
                vHex = getHexValues(tPoint);
                newPVector.add(new String(""+vHex[0]+vHex[1]));
                newCVector.add(tColor);
                oldColor = new Color(tColor.getRGB());
            }
        }
        if(isReplace)
        {
            hColorVector.clear();
            scrollStart = 0;
        }
        int vSize = newPVector.size();
        for(int i=0; i < vSize; i++)
        {
            hColorVector.add(newPVector.get(i));
        }
    }
    
    private void evalScrollStart()
    {
        if(hColorVector.size() > 6)
        {
            if(this.upIsPressed)
            {
                if(scrollStart > 0) scrollStart = scrollStart - 1;
            }
            
            if(this.dnIsPressed)
            {
                if(scrollStart < hColorVector.size() - 6) scrollStart = scrollStart + 1;
            }
        }
    }
    
    protected void addMouseListeners(){
        this.addMouseListener(new MouseListener(){
            public void mouseClicked(MouseEvent e){
            }
            
            public void mouseEntered(MouseEvent e){
                
            }
            
            public void mouseExited(MouseEvent e){
                cp.setCursor(defcur);
            }
            
            public void mousePressed(MouseEvent e){
                if(isColorDropper(e))
                {
                    startPoint = e.getPoint();
                    endPoint = e.getPoint();
                }
                /*
                else
                {
                    if(e.getPoint().x > 273 && e.getPoint().x < 288)
                    {
                        if(e.getPoint().y > 15 && e.getPoint().y < 31)
                        {
                            upIsPressed = true;
                            evalScrollStart();
                            repaint();
                        }
                        if(e.getPoint().y > 127 && e.getPoint().y < 143)
                        {
                            dnIsPressed = true;
                            evalScrollStart();
                            repaint();
                        }
                    }
                }
                */
            }
            
            public void mouseReleased(MouseEvent e){
                boolean isReplace = true;
//                if(e.isControlDown()) isReplace = false;
                if(isColorDropper(e))
                {
                    setColorSelection(isReplace);
                    getIconColor();
                }
                startPoint = e.getPoint();
                endPoint = e.getPoint();
//                if(upIsPressed) upIsPressed = false;
//                if(dnIsPressed) dnIsPressed = false;
                repaint();
            }
        });
        
        this.addMouseMotionListener(new MouseMotionListener(){
            public void mouseDragged(MouseEvent e){
                if(isColorDropper(e)) endPoint = e.getPoint();
                repaint();
            }
            
            public void mouseMoved(MouseEvent e){
                isColorDropper(e);
            }
        });
    }
    
    protected Color selectColorWithText(String text){
        this.setDrawImage(this.dp.cPalette);
        String xString = text.substring(0,1);
        String yString = text.substring(1,2);
        
        int xValue = getXIntFromString(xString);
        int yValue = getYIntFromString(yString);
        
        xValue = (xValue * 16);
        yValue = (yValue * 8);
        
        Color tColor = new Color(bi.getRGB(xValue, yValue));

        return tColor;
    }
    
    protected int getXIntFromString(String cString){
        int value = 0;
        switch(cString.charAt(0)){
            case KeyEvent.VK_A:
                value = 10;
                break;
            case KeyEvent.VK_B:
                value = 11;
                break;
            case KeyEvent.VK_C:
                value = 12;
                break;
            case KeyEvent.VK_D:
                value = 13;
                break;
            case KeyEvent.VK_E:
                value = 14;
                break;
            case KeyEvent.VK_F:
                value = 15;
                break;
            default:
                Integer v = new Integer(cString);
                value = v.intValue();
                break;
        }
        return value;
    }
    
    protected int getYIntFromString(String cString){
        int value = 0;
        switch(cString.charAt(0)){
            case KeyEvent.VK_A:
                value = 10;
                break;
            case KeyEvent.VK_B:
                value = 10;
                break;
            case KeyEvent.VK_C:
                value = 12;
                break;
            case KeyEvent.VK_D:
                value = 12;
                break;
            case KeyEvent.VK_E:
                value = 14;
                break;
            case KeyEvent.VK_F:
                value = 14;
                break;
            default:
                Integer v = new Integer(cString);
                value = (v.intValue() / 2) * 2;
                break;
        }
        return value;
    }
    
   public void paint(Graphics g){
      Graphics2D g2d = (Graphics2D)g;
      g2d.setPaint(Color.BLACK);
      g2d.drawImage(drawImage, 0, 0, Color.WHITE, this);
      g2d.setPaint(Color.WHITE);
      Line2D.Float ccLine =  new Line2D.Float(startPoint, endPoint);
      if(!startPoint.equals(endPoint)) g2d.draw(ccLine);
//      g2d.drawImage(scrollImage, 273, 15, Color.WHITE, this);
//      if(upIsPressed) g2d.drawImage(press_up, 273, 15, Color.WHITE, this);
//      if(dnIsPressed) g2d.drawImage(press_dn, 273, 127, Color.WHITE, this);
      
//      int sixCount = 0;
//      int colorCount = scrollStart;
//      int yLoc = 31;
//      Rectangle blot = new Rectangle(273, yLoc, 16, 16);
      
//      while(sixCount < 6 && colorCount < hColorVector.size())
//      {
//          int yAdj = sixCount * 16;
//          blot.y = yAdj + yLoc;
//          g2d.setPaint(selectColorWithText((String)hColorVector.get(colorCount)));
//          g2d.fill(blot);
//          sixCount = sixCount + 1;
//          colorCount = colorCount + 1;
//      }
      
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
   DevProject dp; // GraphicEditor ge;
   JDesktopPane jdp;
   ColorPalettes cp;
   Image biNTSC;
   Image biPAL;
   Image biSECAM;
   Image biIconNTSC;
   Image biIconPAL;
   Image biIconSECAM;
   Image drawImage;
   Image scrollImage;
   Image press_up;
   Image press_dn;
   Cursor defcur;
   Cursor dropper;
   protected boolean isDropper = false;
   protected Point curLoc = new Point(0,0);
   protected Point xLoc = new Point(0, 390);
   protected Point yLoc = new Point(0, 101);
   protected BufferedImage bi;
   protected Vector hColorVector = new Vector(1);
   protected Point startPoint = new Point(0,0);
   protected Point endPoint =  new Point(0,0);
   protected boolean upIsPressed = false;
   protected boolean dnIsPressed = false;
   private int scrollStart = 0;
 
}
